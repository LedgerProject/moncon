{"version":3,"sources":["Assets/svg/IconLeft.jsx","Components/ReadQrCode/ReadQrCode.jsx","Components/Scan/Scan.jsx"],"names":["IconLeft","width","height","viewBox","fill","xmlns","fillRule","clipRule","d","ReadQRCode","socket","classes","useStyles","useState","QrScan","setQrScan","QrResponse","setQrResponse","addToast","useToasts","history","useHistory","useEffect","Object","keys","length","Grid","container","justifyContent","className","root","style","background","contentMenu","onClick","push","goBack","marginTop","marginRight","cursor","color","fontSize","contentMenu_2","Typography","fontWeight","position","paddingTop","delay","previewStyle","onError","err","message","appearance","autoDismiss","autoDismissTimeout","onScan","data","console","log","dataParse","JSON","parse","localStorage","hasOwnProperty","request","error","facingMode","ScanShare","makeStyles","theme","flexGrow","maxWidth","top","bottom","display","button","margin","textAlign","borderRadius","textTransform","padding","opacity","boxShadow","Scan","socketRef","useRef","setDisplay","matches","useMediaQuery","current","io","process","on","id","overflowX","overflowY","Button","variant","ReadQrCode"],"mappings":"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","file":"static/js/20.2a602f5d.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst IconLeft = (  ) => (\n  <>\n    \n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M15.41 7.41L14 6L8 12L14 18L15.41 16.59L10.83 12L15.41 7.41Z\" fill=\"white\"/>\n</svg>\n  </>\n)\nexport default IconLeft\n","import { useState,useEffect } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { useStyles } from \"./style\";\nimport QrReader from \"react-qr-reader\";\nimport { useHistory } from \"react-router-dom\";\n//import ScanReceive from \"./ScanReceive\";\nimport IconLeft from \"../../Assets/svg/IconLeft\";\nimport ScanShare from \"./ScanShare\";\nimport { useToasts } from 'react-toast-notifications';\n\n\nconst ReadQRCode = ({socket}) => {\n  const classes = useStyles();\n  const [QrScan, setQrScan] = useState(false)\n  const [QrResponse, setQrResponse] = useState({});  \n  const { addToast } = useToasts();\n  const history = useHistory();\n  //this is the delay between each scan\n  const delay = 400;\n\n  const handleError = err => {\n    addToast(err.message, { appearance: 'error',autoDismiss: true, autoDismissTimeout: 3000 })    \n\n  };\n\n  const handleReturn = () => {\n    if (history.length <= 2) {\n      history.push(\"/documents\");\n    } else {\n      history.goBack();\n    }\n  };\n\n  const handleScan = data => {\n    try {    \n      if (data) {\n        console.log(data);\n        const dataParse = JSON.parse(data)\n        const validate = localStorage.hasOwnProperty(dataParse.request)\n        if(!validate){\n          return  addToast('Credential Fail', \n              { \n                appearance: 'error',\n                autoDismiss: true,\n                autoDismissTimeout: 4000 \n              }\n            )    \n        } \n        setQrResponse(dataParse);  \n        addToast('Correct QR code', \n          { \n            appearance: 'success',\n            autoDismiss: true,\n            autoDismissTimeout: 3000 \n          }\n        ); \n        return       \n      }\n    }catch(error){\n      console.log(error.message);\n      addToast(error.message, \n        { \n          appearance: 'error',\n          autoDismiss: true,\n          autoDismissTimeout: 3000 \n        }\n      );    \n      setQrResponse({});\n    }\n  }    \n  \n  useEffect(() => {        \n    if(Object.keys(QrResponse).length > 0){\n      setQrScan(true)\n    }\n  }, [QrResponse])\n\n  return (\n    <> \n      <Grid container justifyContent=\"center\" className={classes.root}>\n        <Grid container justifyContent=\"center\" style={{ background: '#272727 !important'}}>      \n          {\n            !QrScan && (\n              <> \n                <div className={classes.contentMenu}>\n                  <div\n                    onClick={handleReturn}\n                    style={{ marginTop: \"18px\", marginRight: \"12px\", cursor: \"pointer\" }}\n                  >          \n                    <IconLeft />\n                  </div>       \n                  <h1 style={{ color: \"#ffff\", fontSize: '2.2rem' }}>Scan QR code</h1>\n                </div>\n                <Grid container justifyContent=\"center\"  className={classes.contentMenu_2}>\n                  <Typography style={{ color: \"#ffff\", fontSize: '2.2rem', fontWeight: 'normal !important' }}>To use Moncon Wallet go to the web to unlock on your computer</Typography>\n                </Grid>\n                <div\n                  style={{\n                    position: \"relative\",\n                    width: \"100%\",\n                    paddingTop: \"180%\",\n                    background: '#272727 !important',\n                  }}\n                >\n                  <QrReader\n                    delay={delay}\n                    className={classes.previewStyle}\n                    onError={handleError}\n                    onScan={handleScan}\n                    facingMode=\"environment\"\n                  />\n                </div>\n              </>\n            )\n          }\n        </Grid>      \n        {\n          QrScan && (\n            <ScanShare QrResponse={QrResponse} socket={socket}/>\n          )\n        }\n      </Grid>\n    </>  \n  );\n};\n\nexport default ReadQRCode;\n","import { useState,useEffect,useRef } from \"react\";\nimport ReadQrCode from '../ReadQrCode';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Grid, Button } from '@material-ui/core';\nimport { useHistory } from \"react-router-dom\";\nimport io from 'socket.io-client';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport IconLeft from \"../../Assets/svg/IconLeft\";\nimport { useToasts } from 'react-toast-notifications'\nconst useStyles = makeStyles((theme) => ({\n  root: {\n  flexGrow: 1,\n    maxWidth: 500,\n    top: 'auto',\n    bottom: 0,\n  },\n  contentMenu:{\n    background: '#272727',\n    display: 'flex',\n    width: '100%',\n\n  },\nbutton: {\n    margin: \"20px 50px !important\",\n    textAlign: 'center !important',\n    borderRadius: \"4px !important\",\n    fontSize: \"14px !important\",\n    fontWeight: 600,\n    textTransform: 'none !important',\n    padding: \"12px 31px 14px !important\",\n    background: \"#03DAC5 !important\",\n    color: \"#fff !important\",\n    cursor: \"pointer !important\",\n    \"@media screen and (max-width: 800px)\": {\n        textAlign: 'center !important',\n        margin: \"20px 10px !important\",\n        borderRadius: \"4px !important\",\n        fontSize: \"12px !important\",\n        fontWeight: 600,\n        padding: \"12px 15px 14px !important\",\n        background: \"#03DAC5 !immportant\",\n        color: \"#fff !important\",\n        cursor: \"pointer\",\n    },\n        '&:hover': {\n            opacity: '.8',\n            boxShadow: 'none',\n        },\n  },\n\n}));\n\nconst Scan = (  ) =>{\n  const socketRef = useRef()\n  const { addToast } = useToasts()\n  const classes = useStyles();\n  const [display, setDisplay] = useState(true)\n  const matches = useMediaQuery('(min-width:600px)');\n  const history = useHistory();\n  const handleReturn = () => {\n    if (history.length <= 2) {\n      history.push(\"/documents\");\n    } else {\n      history.goBack();\n    }\n  };\n\n  useEffect(() => {\n    socketRef.current = io(process.env.REACT_APP_MONCON_URL_SOCKET);    \n    socketRef.current.on('connect', () => {        \n      console.log(socketRef.current.id);\n    });\n    \n    return () => {\n      socketRef.current.on('disconnect', () => {\n        console.log('disconnect');\n      });\n    }\n    \n  }, [])  \n\n\n  const handleClick = () => {\n    if(display === matches){\n      return   setDisplay(!display);\n    } else {\n      return addToast('Set the size of your browser smaller to use the scan', { appearance: 'info',autoDismiss: true, autoDismissTimeout: 6000 })\n    }\n  };\n\n  return(\n    <>\n      <div \n      className={classes.contentMenu} \n      style={{display: display ? 'none' : 'flex'}}>\n        <div\n          onClick={handleReturn}\n          style={{ marginTop: \"17px\", marginRight: \"12px\", cursor: \"pointer\" }}\n        >\n          <IconLeft />\n        </div>\n\n        <h1 style={{ color: \"#ffff\", fontSize: '2.2rem' }}>Return</h1>\n      </div>\n      <Grid \n      style={\n        {\n          marginTop: display ? '0px' : '30px',\n          overflowX: 'hidden',\n          overflowY: 'hidden'\n        }\n      } \n      container \n      justifyContent='center'>\n        <Grid container justifyContent='center'>\n          <Button\n            style={{display: display ? 'none' : 'block'}}\n            color='primary' \n            variant='contained'\n            className={classes.button}\n            onClick={handleClick}\n          >\n            Read Qr Code\n          </Button>\n        \n          { display && <ReadQrCode socket={socketRef}/>  }\n        </Grid>  \n      </Grid>\n    </>\n  )\n}\nexport default Scan\n"],"sourceRoot":""}